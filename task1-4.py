"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
Задание творческое. Здесь нет жестких требований к выполнению.
"""
# chek_user_1 - O(n)
def chek_user_1(d, l):
    if l[0] in d: # O(n)
        if l[1] == d[l[0]][0]: # O(1)
            if d[l[0]][1] == True: # O(1)
                return 'допущен к ресурсу' # O(1)
            else:
                return 'активируйте учетную запись' # O(1)
        else:
            return 'пароль неверный' # O(1)
    else:
        return 'учетная запись не существует' # O(1)
# chek_user_2 - O(1)
def chek_user_2(d, l):
    if d.get(l[0]) == None: # O(1)
        return 'учетная запись не существует' # O(1)
    else:
        if l[1] == d[l[0]][0]: # O(1)
            if d[l[0]][1] == True: # O(1)
                return 'допущен к ресурсу' # O(1)
            else:
                return 'активируйте учетную запись' # O(1)
        else:
            return 'пароль неверный' # O(1)
users = {'login1': ['pasword1', True], 'login2': ['pasword2', False], 'login3': ['pasword3', True]}
print(chek_user_1(users, ['login1', 'pasword1']))
print(chek_user_1(users, ['login2', 'pasword2']))
print(chek_user_1(users, ['login4', 'pas4word2']))
print(chek_user_2(users, ['login1', 'pasword1']))
print(chek_user_2(users, ['login2', 'pasword2']))
print(chek_user_2(users, ['login4', 'pas4word2']))
"""
chek_user_2 является более эфективным решением задачи, ведь имеет константную сложность, а  chek_user_1 
линейную. Следовательно chek_user_2 задействует меньше ресурсов компьютера и
является более производительным.
"""